// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: table_products.sql

package database

import (
	"context"
)

const addProductToTable = `-- name: AddProductToTable :exec
INSERT INTO table_products (table_id, product_id)
VALUES (?, ?)
`

type AddProductToTableParams struct {
	TableID   string
	ProductID string
}

func (q *Queries) AddProductToTable(ctx context.Context, arg AddProductToTableParams) error {
	_, err := q.db.ExecContext(ctx, addProductToTable, arg.TableID, arg.ProductID)
	return err
}

const listProductsByTable = `-- name: ListProductsByTable :many
SELECT p.id, p.name, p.image, p.price FROM products p
INNER JOIN table_products tp ON tp.product_id = p.id
WHERE tp.table_id = ?
`

func (q *Queries) ListProductsByTable(ctx context.Context, tableID string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByTable, tableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductFromTable = `-- name: RemoveProductFromTable :exec
DELETE FROM table_products WHERE table_id = ? AND product_id = ?
`

type RemoveProductFromTableParams struct {
	TableID   string
	ProductID string
}

func (q *Queries) RemoveProductFromTable(ctx context.Context, arg RemoveProductFromTableParams) error {
	_, err := q.db.ExecContext(ctx, removeProductFromTable, arg.TableID, arg.ProductID)
	return err
}
