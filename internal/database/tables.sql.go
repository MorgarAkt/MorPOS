// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tables.sql

package database

import (
	"context"
	"database/sql"
)

const createTable = `-- name: CreateTable :one
INSERT INTO tables (id, number, salon_id, is_full, total_bill)
VALUES (?, ?, ?, ?, ?) RETURNING id, number, salon_id, is_full, total_bill
`

type CreateTableParams struct {
	ID        string
	Number    int64
	SalonID   string
	IsFull    int64
	TotalBill sql.NullFloat64
}

func (q *Queries) CreateTable(ctx context.Context, arg CreateTableParams) (Table, error) {
	row := q.db.QueryRowContext(ctx, createTable,
		arg.ID,
		arg.Number,
		arg.SalonID,
		arg.IsFull,
		arg.TotalBill,
	)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.SalonID,
		&i.IsFull,
		&i.TotalBill,
	)
	return i, err
}

const deleteTable = `-- name: DeleteTable :exec
DELETE FROM tables WHERE id = ?
`

func (q *Queries) DeleteTable(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTable, id)
	return err
}

const getTable = `-- name: GetTable :one
SELECT id, number, salon_id, is_full, total_bill FROM tables WHERE id = ? LIMIT 1
`

func (q *Queries) GetTable(ctx context.Context, id string) (Table, error) {
	row := q.db.QueryRowContext(ctx, getTable, id)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.SalonID,
		&i.IsFull,
		&i.TotalBill,
	)
	return i, err
}

const listTables = `-- name: ListTables :many
SELECT id, number, salon_id, is_full, total_bill FROM tables ORDER BY id
`

func (q *Queries) ListTables(ctx context.Context) ([]Table, error) {
	rows, err := q.db.QueryContext(ctx, listTables)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Table
	for rows.Next() {
		var i Table
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.SalonID,
			&i.IsFull,
			&i.TotalBill,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTable = `-- name: UpdateTable :exec
UPDATE tables
SET number = ?, salon_id = ?, is_full = ?, total_bill = ?
WHERE id = ?
`

type UpdateTableParams struct {
	Number    int64
	SalonID   string
	IsFull    int64
	TotalBill sql.NullFloat64
	ID        string
}

func (q *Queries) UpdateTable(ctx context.Context, arg UpdateTableParams) error {
	_, err := q.db.ExecContext(ctx, updateTable,
		arg.Number,
		arg.SalonID,
		arg.IsFull,
		arg.TotalBill,
		arg.ID,
	)
	return err
}
