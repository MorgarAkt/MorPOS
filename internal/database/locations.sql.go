// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: locations.sql

package database

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (id, name)
VALUES (?, ?) RETURNING id, name
`

type CreateLocationParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation, arg.ID, arg.Name)
	var i Location
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM locations WHERE id = ?
`

func (q *Queries) DeleteLocation(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const getLocation = `-- name: GetLocation :one
SELECT id, name FROM locations WHERE id = ? LIMIT 1
`

func (q *Queries) GetLocation(ctx context.Context, id string) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i Location
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, name FROM locations ORDER BY id
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :exec
UPDATE locations
SET name = ?
WHERE id = ?
`

type UpdateLocationParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateLocation, arg.Name, arg.ID)
	return err
}
